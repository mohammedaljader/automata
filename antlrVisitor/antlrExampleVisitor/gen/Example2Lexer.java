// Generated from Example2.g4 by ANTLR 4.10.1
package gen;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Example2Lexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IS_EQUAL=1, MUL=2, DIV=3, ADD=4, SUB=5, POW=6, FACT=7, DOT=8, COMMA=9, 
		SEMICOLON=10, COLON=11, OPAR=12, CPAR=13, FOR=14, OPEN_CURLY_BRACKET=15, 
		CLOSE_CURLY_BRACKET=16, OPEN_SQUARE_BRACKET=17, CLOSE_SQUARE_BRACKET=18, 
		QUESTION_MARK=19, AND=20, OR=21, NOT=22, INTEGER=23, CHAR=24, RECORD=25, 
		GREATER_OR_EQUAL=26, SMALLER_OR_EQUAL=27, GREATHER_THAN=28, SMALLER_THAN=29, 
		EQUAL=30, NOT_EQUAL=31, PRINT=32, INT=33, STRING=34, BOOL=35, ID=36, COMMENT=37, 
		WS=38, EQUAL_INCREMENT=39, EQUAL_DECREMENT=40, INCREMENT=41, DECREMENT=42;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"IS_EQUAL", "MUL", "DIV", "ADD", "SUB", "POW", "FACT", "DOT", "COMMA", 
			"SEMICOLON", "COLON", "OPAR", "CPAR", "FOR", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", 
			"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "QUESTION_MARK", "AND", 
			"OR", "NOT", "INTEGER", "CHAR", "RECORD", "GREATER_OR_EQUAL", "SMALLER_OR_EQUAL", 
			"GREATHER_THAN", "SMALLER_THAN", "EQUAL", "NOT_EQUAL", "PRINT", "INT", 
			"STRING", "BOOL", "ID", "COMMENT", "WS", "EQUAL_INCREMENT", "EQUAL_DECREMENT", 
			"INCREMENT", "DECREMENT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'='", "'*'", "'/'", "'+'", "'-'", "'^'", "'!'", "'.'", "','", 
			"';'", "':'", "'('", "')'", "'for'", "'{'", "'}'", "'['", "']'", "'?'", 
			"'and'", "'or'", "'not'", "'integer'", "'char'", "'record'", "'>='", 
			"'<='", "'>'", "'<'", "'=='", "'!='", "'print'", null, null, null, null, 
			null, null, "'+='", "'-='", "'++'", "'--'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "IS_EQUAL", "MUL", "DIV", "ADD", "SUB", "POW", "FACT", "DOT", "COMMA", 
			"SEMICOLON", "COLON", "OPAR", "CPAR", "FOR", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", 
			"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "QUESTION_MARK", "AND", 
			"OR", "NOT", "INTEGER", "CHAR", "RECORD", "GREATER_OR_EQUAL", "SMALLER_OR_EQUAL", 
			"GREATHER_THAN", "SMALLER_THAN", "EQUAL", "NOT_EQUAL", "PRINT", "INT", 
			"STRING", "BOOL", "ID", "COMMENT", "WS", "EQUAL_INCREMENT", "EQUAL_DECREMENT", 
			"INCREMENT", "DECREMENT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public Example2Lexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Example2.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000*\u00f2\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0001\u0000\u0001\u0000"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001"+
		"\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010"+
		"\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0004 \u00b4\b \u000b \f "+
		"\u00b5\u0001!\u0001!\u0005!\u00ba\b!\n!\f!\u00bd\t!\u0001!\u0001!\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003"+
		"\"\u00ca\b\"\u0001#\u0001#\u0005#\u00ce\b#\n#\f#\u00d1\t#\u0001$\u0001"+
		"$\u0001$\u0001$\u0004$\u00d7\b$\u000b$\f$\u00d8\u0001$\u0003$\u00dc\b"+
		"$\u0001$\u0001$\u0001%\u0004%\u00e1\b%\u000b%\f%\u00e2\u0001%\u0001%\u0001"+
		"&\u0001&\u0001&\u0001\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001)\u0001"+
		")\u0001)\u0001\u00d8\u0000*\u0001\u0001\u0003\u0002\u0005\u0003\u0007"+
		"\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b"+
		"\u0017\f\u0019\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013"+
		"\'\u0014)\u0015+\u0016-\u0017/\u00181\u00193\u001a5\u001b7\u001c9\u001d"+
		";\u001e=\u001f? A!C\"E#G$I%K&M\'O(Q)S*\u0001\u0000\u0006\u0001\u00000"+
		"9\u0003\u0000\n\n\r\r\"\"\u0003\u0000AZ__az\u0006\u0000!!..09AZ__az\u0001"+
		"\u0001\n\n\u0003\u0000\t\n\r\r  \u00f7\u0000\u0001\u0001\u0000\u0000\u0000"+
		"\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000"+
		"\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000"+
		"\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f"+
		"\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013"+
		"\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017"+
		"\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b"+
		"\u0001\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f"+
		"\u0001\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000"+
		"\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000"+
		"\u0000\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000"+
		"-\u0001\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001"+
		"\u0000\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000"+
		"\u0000\u00007\u0001\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000"+
		";\u0001\u0000\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000?\u0001"+
		"\u0000\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0000C\u0001\u0000\u0000"+
		"\u0000\u0000E\u0001\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000"+
		"I\u0001\u0000\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000M\u0001"+
		"\u0000\u0000\u0000\u0000O\u0001\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000"+
		"\u0000\u0000S\u0001\u0000\u0000\u0000\u0001U\u0001\u0000\u0000\u0000\u0003"+
		"W\u0001\u0000\u0000\u0000\u0005Y\u0001\u0000\u0000\u0000\u0007[\u0001"+
		"\u0000\u0000\u0000\t]\u0001\u0000\u0000\u0000\u000b_\u0001\u0000\u0000"+
		"\u0000\ra\u0001\u0000\u0000\u0000\u000fc\u0001\u0000\u0000\u0000\u0011"+
		"e\u0001\u0000\u0000\u0000\u0013g\u0001\u0000\u0000\u0000\u0015i\u0001"+
		"\u0000\u0000\u0000\u0017k\u0001\u0000\u0000\u0000\u0019m\u0001\u0000\u0000"+
		"\u0000\u001bo\u0001\u0000\u0000\u0000\u001ds\u0001\u0000\u0000\u0000\u001f"+
		"u\u0001\u0000\u0000\u0000!w\u0001\u0000\u0000\u0000#y\u0001\u0000\u0000"+
		"\u0000%{\u0001\u0000\u0000\u0000\'}\u0001\u0000\u0000\u0000)\u0081\u0001"+
		"\u0000\u0000\u0000+\u0084\u0001\u0000\u0000\u0000-\u0088\u0001\u0000\u0000"+
		"\u0000/\u0090\u0001\u0000\u0000\u00001\u0095\u0001\u0000\u0000\u00003"+
		"\u009c\u0001\u0000\u0000\u00005\u009f\u0001\u0000\u0000\u00007\u00a2\u0001"+
		"\u0000\u0000\u00009\u00a4\u0001\u0000\u0000\u0000;\u00a6\u0001\u0000\u0000"+
		"\u0000=\u00a9\u0001\u0000\u0000\u0000?\u00ac\u0001\u0000\u0000\u0000A"+
		"\u00b3\u0001\u0000\u0000\u0000C\u00b7\u0001\u0000\u0000\u0000E\u00c9\u0001"+
		"\u0000\u0000\u0000G\u00cb\u0001\u0000\u0000\u0000I\u00d2\u0001\u0000\u0000"+
		"\u0000K\u00e0\u0001\u0000\u0000\u0000M\u00e6\u0001\u0000\u0000\u0000O"+
		"\u00e9\u0001\u0000\u0000\u0000Q\u00ec\u0001\u0000\u0000\u0000S\u00ef\u0001"+
		"\u0000\u0000\u0000UV\u0005=\u0000\u0000V\u0002\u0001\u0000\u0000\u0000"+
		"WX\u0005*\u0000\u0000X\u0004\u0001\u0000\u0000\u0000YZ\u0005/\u0000\u0000"+
		"Z\u0006\u0001\u0000\u0000\u0000[\\\u0005+\u0000\u0000\\\b\u0001\u0000"+
		"\u0000\u0000]^\u0005-\u0000\u0000^\n\u0001\u0000\u0000\u0000_`\u0005^"+
		"\u0000\u0000`\f\u0001\u0000\u0000\u0000ab\u0005!\u0000\u0000b\u000e\u0001"+
		"\u0000\u0000\u0000cd\u0005.\u0000\u0000d\u0010\u0001\u0000\u0000\u0000"+
		"ef\u0005,\u0000\u0000f\u0012\u0001\u0000\u0000\u0000gh\u0005;\u0000\u0000"+
		"h\u0014\u0001\u0000\u0000\u0000ij\u0005:\u0000\u0000j\u0016\u0001\u0000"+
		"\u0000\u0000kl\u0005(\u0000\u0000l\u0018\u0001\u0000\u0000\u0000mn\u0005"+
		")\u0000\u0000n\u001a\u0001\u0000\u0000\u0000op\u0005f\u0000\u0000pq\u0005"+
		"o\u0000\u0000qr\u0005r\u0000\u0000r\u001c\u0001\u0000\u0000\u0000st\u0005"+
		"{\u0000\u0000t\u001e\u0001\u0000\u0000\u0000uv\u0005}\u0000\u0000v \u0001"+
		"\u0000\u0000\u0000wx\u0005[\u0000\u0000x\"\u0001\u0000\u0000\u0000yz\u0005"+
		"]\u0000\u0000z$\u0001\u0000\u0000\u0000{|\u0005?\u0000\u0000|&\u0001\u0000"+
		"\u0000\u0000}~\u0005a\u0000\u0000~\u007f\u0005n\u0000\u0000\u007f\u0080"+
		"\u0005d\u0000\u0000\u0080(\u0001\u0000\u0000\u0000\u0081\u0082\u0005o"+
		"\u0000\u0000\u0082\u0083\u0005r\u0000\u0000\u0083*\u0001\u0000\u0000\u0000"+
		"\u0084\u0085\u0005n\u0000\u0000\u0085\u0086\u0005o\u0000\u0000\u0086\u0087"+
		"\u0005t\u0000\u0000\u0087,\u0001\u0000\u0000\u0000\u0088\u0089\u0005i"+
		"\u0000\u0000\u0089\u008a\u0005n\u0000\u0000\u008a\u008b\u0005t\u0000\u0000"+
		"\u008b\u008c\u0005e\u0000\u0000\u008c\u008d\u0005g\u0000\u0000\u008d\u008e"+
		"\u0005e\u0000\u0000\u008e\u008f\u0005r\u0000\u0000\u008f.\u0001\u0000"+
		"\u0000\u0000\u0090\u0091\u0005c\u0000\u0000\u0091\u0092\u0005h\u0000\u0000"+
		"\u0092\u0093\u0005a\u0000\u0000\u0093\u0094\u0005r\u0000\u0000\u00940"+
		"\u0001\u0000\u0000\u0000\u0095\u0096\u0005r\u0000\u0000\u0096\u0097\u0005"+
		"e\u0000\u0000\u0097\u0098\u0005c\u0000\u0000\u0098\u0099\u0005o\u0000"+
		"\u0000\u0099\u009a\u0005r\u0000\u0000\u009a\u009b\u0005d\u0000\u0000\u009b"+
		"2\u0001\u0000\u0000\u0000\u009c\u009d\u0005>\u0000\u0000\u009d\u009e\u0005"+
		"=\u0000\u0000\u009e4\u0001\u0000\u0000\u0000\u009f\u00a0\u0005<\u0000"+
		"\u0000\u00a0\u00a1\u0005=\u0000\u0000\u00a16\u0001\u0000\u0000\u0000\u00a2"+
		"\u00a3\u0005>\u0000\u0000\u00a38\u0001\u0000\u0000\u0000\u00a4\u00a5\u0005"+
		"<\u0000\u0000\u00a5:\u0001\u0000\u0000\u0000\u00a6\u00a7\u0005=\u0000"+
		"\u0000\u00a7\u00a8\u0005=\u0000\u0000\u00a8<\u0001\u0000\u0000\u0000\u00a9"+
		"\u00aa\u0005!\u0000\u0000\u00aa\u00ab\u0005=\u0000\u0000\u00ab>\u0001"+
		"\u0000\u0000\u0000\u00ac\u00ad\u0005p\u0000\u0000\u00ad\u00ae\u0005r\u0000"+
		"\u0000\u00ae\u00af\u0005i\u0000\u0000\u00af\u00b0\u0005n\u0000\u0000\u00b0"+
		"\u00b1\u0005t\u0000\u0000\u00b1@\u0001\u0000\u0000\u0000\u00b2\u00b4\u0007"+
		"\u0000\u0000\u0000\u00b3\u00b2\u0001\u0000\u0000\u0000\u00b4\u00b5\u0001"+
		"\u0000\u0000\u0000\u00b5\u00b3\u0001\u0000\u0000\u0000\u00b5\u00b6\u0001"+
		"\u0000\u0000\u0000\u00b6B\u0001\u0000\u0000\u0000\u00b7\u00bb\u0005\""+
		"\u0000\u0000\u00b8\u00ba\b\u0001\u0000\u0000\u00b9\u00b8\u0001\u0000\u0000"+
		"\u0000\u00ba\u00bd\u0001\u0000\u0000\u0000\u00bb\u00b9\u0001\u0000\u0000"+
		"\u0000\u00bb\u00bc\u0001\u0000\u0000\u0000\u00bc\u00be\u0001\u0000\u0000"+
		"\u0000\u00bd\u00bb\u0001\u0000\u0000\u0000\u00be\u00bf\u0005\"\u0000\u0000"+
		"\u00bfD\u0001\u0000\u0000\u0000\u00c0\u00c1\u0005t\u0000\u0000\u00c1\u00c2"+
		"\u0005r\u0000\u0000\u00c2\u00c3\u0005u\u0000\u0000\u00c3\u00ca\u0005e"+
		"\u0000\u0000\u00c4\u00c5\u0005f\u0000\u0000\u00c5\u00c6\u0005a\u0000\u0000"+
		"\u00c6\u00c7\u0005l\u0000\u0000\u00c7\u00c8\u0005s\u0000\u0000\u00c8\u00ca"+
		"\u0005e\u0000\u0000\u00c9\u00c0\u0001\u0000\u0000\u0000\u00c9\u00c4\u0001"+
		"\u0000\u0000\u0000\u00caF\u0001\u0000\u0000\u0000\u00cb\u00cf\u0007\u0002"+
		"\u0000\u0000\u00cc\u00ce\u0007\u0003\u0000\u0000\u00cd\u00cc\u0001\u0000"+
		"\u0000\u0000\u00ce\u00d1\u0001\u0000\u0000\u0000\u00cf\u00cd\u0001\u0000"+
		"\u0000\u0000\u00cf\u00d0\u0001\u0000\u0000\u0000\u00d0H\u0001\u0000\u0000"+
		"\u0000\u00d1\u00cf\u0001\u0000\u0000\u0000\u00d2\u00d3\u0005/\u0000\u0000"+
		"\u00d3\u00d4\u0005/\u0000\u0000\u00d4\u00d6\u0001\u0000\u0000\u0000\u00d5"+
		"\u00d7\t\u0000\u0000\u0000\u00d6\u00d5\u0001\u0000\u0000\u0000\u00d7\u00d8"+
		"\u0001\u0000\u0000\u0000\u00d8\u00d9\u0001\u0000\u0000\u0000\u00d8\u00d6"+
		"\u0001\u0000\u0000\u0000\u00d9\u00db\u0001\u0000\u0000\u0000\u00da\u00dc"+
		"\u0007\u0004\u0000\u0000\u00db\u00da\u0001\u0000\u0000\u0000\u00dc\u00dd"+
		"\u0001\u0000\u0000\u0000\u00dd\u00de\u0006$\u0000\u0000\u00deJ\u0001\u0000"+
		"\u0000\u0000\u00df\u00e1\u0007\u0005\u0000\u0000\u00e0\u00df\u0001\u0000"+
		"\u0000\u0000\u00e1\u00e2\u0001\u0000\u0000\u0000\u00e2\u00e0\u0001\u0000"+
		"\u0000\u0000\u00e2\u00e3\u0001\u0000\u0000\u0000\u00e3\u00e4\u0001\u0000"+
		"\u0000\u0000\u00e4\u00e5\u0006%\u0000\u0000\u00e5L\u0001\u0000\u0000\u0000"+
		"\u00e6\u00e7\u0005+\u0000\u0000\u00e7\u00e8\u0005=\u0000\u0000\u00e8N"+
		"\u0001\u0000\u0000\u0000\u00e9\u00ea\u0005-\u0000\u0000\u00ea\u00eb\u0005"+
		"=\u0000\u0000\u00ebP\u0001\u0000\u0000\u0000\u00ec\u00ed\u0005+\u0000"+
		"\u0000\u00ed\u00ee\u0005+\u0000\u0000\u00eeR\u0001\u0000\u0000\u0000\u00ef"+
		"\u00f0\u0005-\u0000\u0000\u00f0\u00f1\u0005-\u0000\u0000\u00f1T\u0001"+
		"\u0000\u0000\u0000\b\u0000\u00b5\u00bb\u00c9\u00cf\u00d8\u00db\u00e2\u0001"+
		"\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}